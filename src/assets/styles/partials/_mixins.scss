@mixin prefix($name, $value) {
  -webkit-#{$name}: $value;
  -moz-#{$name}: $value;
  -ms-#{$name}: $value;
  -o-#{$name}: $value;
  #{$name}: $value;
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction==left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction==right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if ($direction==down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

@mixin rounded($radius: 7px) {
  border-radius: $radius;
}

@mixin roundedcorner($surface, $side, $radius: 7px) {
  border-#{$surface}-#{$side}-radius: $radius;
}

@mixin boxshadow($horiz, $vert, $blur, $color) {
  box-shadow: $horiz $vert $blur $color;
}

@mixin innershadow($horiz, $vert, $blur, $color) {
  box-shadow: inset $horiz $vert $blur $color;
}

@mixin opacity($level) {
  filter: alpha(opacity=$level * 100);
  opacity: $level;
}

@mixin backgroundclip($val: padding-box) {
  -webkit-background-clip: $val;
  -moz-background-clip: $val;
}

@mixin transition($property: all, $duration: 0.2s, $timing: ease-in-out) {
  -webkit-transition: #{$property} $duration $timing;
  -moz-transition: #{$property} $duration $timing;
  -ie-transition: #{$property} $duration $timing;
  -o-transition: #{$property} $duration $timing;
  transition: $property $duration $timing;
}

@mixin transition-with-prefix($property, $duration: 0.2s, $timing: ease-in-out) {
  -webkit-transition: -webkit-#{$property} $duration $timing;
  -moz-transition: -moz-#{$property} $duration $timing;
  -ie-transition: -moz-#{$property} $duration $timing;
  -o-transition: -o-#{$property} $duration $timing;
  transition: $property $duration $timing;
}

@mixin transform($type) {
  -webkit-transform: $type;
  -moz-transform: $type;
  -ms-transform: $type;
  -o-transform: $type;
  transform: $type;
}

@mixin animation($name, $timing: 0.5s) {
  -webkit-animation: $name $timing;
  -moz-animation: $name $timing;
  -ms-animation: $name $timing;
  -o-animation: $name $timing;
}

@mixin font-face($font-family, $url) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('../../fonts/#{$url}.eot');
    src:
      url('../../fonts/#{$url}.eot?#iefix') format('embedded-opentype'),
      url('../../fonts/#{$url}.woff') format('woff'),
      url('../../fonts/#{$url}.ttf') format('truetype'),
      url('../../fonts/#{$url}.otf') format('opentype');
    font-weight: normal;
    font-style: normal;
  }
}

// Map variable
$icons: (
  add: '\f0c4',
  delete: '\f0c5',
  edit: '\f0c6',
  update: '\f0c7'
);

// Mixin
@mixin icons-list($map) {
  @each $icon-name, $icon in $map {
    @if not map-has-key($map, $icon-name) {
      @warn "'#{$icon-name}' is not a valid icon name";
    } @else {
      &--#{$icon-name}::before {
        content: $icon;
      }
    }
  }
}

// How to use it
.iceBtn {
  background: grey;
  font-size: 2rem;
  padding: 0.6rem 1.6rem;
  border: 0;
  line-height: normal;
  @include icons-list($icons);
}

// CSS Output
// .iceBtn {
//   background-color: grey;
// }
// .iceBtn--add::before {
//   content: "";
// }
// .iceBtn--delete::before {
//   content: "";
// }
// .iceBtn--edit::before {
//   content: "";
// }
// .iceBtn--update::before {
//   content: "";
// }

$spaceamounts: (
  5,
  10,
  15,
  20,
  25,
  30,
  35,
  40,
  45,
  50,
  75,
  100
); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }

    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}

//m-r-5
